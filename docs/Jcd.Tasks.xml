<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jcd.Tasks</name>
    </assembly>
    <members>
        <member name="T:Jcd.Tasks.BlockingTaskProcessor">
            <summary>
            Represents a high level object that enqueues and executes actions, functions, and unstarted tasks,
            waiting for each to complete before executing the next.
            </summary>
            <remarks>
            <para>
            You must ensure all shared resources for the enqueued tasks have their access synchronized
            appropriately.
            </para>
            <para>
            <i>NOTE: This was really just a thought experiment. There are probably legitimately better ways of
            doing this built in to .Net. I had trouble finding them. If you find them, please let me know!</i>
            </para>
            </remarks>
        </member>
        <member name="P:Jcd.Tasks.BlockingTaskProcessor.QueueLength">
            <summary>
            The number of pending commands.
            </summary>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.#ctor(System.Boolean)">
            <summary>
            Constructs a <see cref="T:Jcd.Tasks.BlockingTaskProcessor"/>
            </summary>
            <param name="autoStart"></param>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.Enqueue(System.Action)">
            <summary>
            Enqueues an action. This is a "fire and forget" method. Control is immediately
            returned to the caller.
            </summary>
            <param name="command">The action to enqueue.</param>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.Enqueue(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Enqueues an async action. This is a "fire and forget" method.
            Control is returned to the caller immediately.
            </summary>
            <param name="command">The asynchronous action to enqueue.</param>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.Enqueue``1(System.Func{``0})">
            <summary>
            Enqueues a function. This is a "fire and forget" method.
            The function result will not be available and control is immediately returned to the caller.
            </summary>
            <param name="command">The command to enqueue.</param>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.Enqueue``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Enqueues an async function. This is a "fire and forget" method.
            The function result will not be available and control is immediately returned to the caller.
            </summary>
            <param name="command">The async function to enqueue.</param>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.EnqueueAndGetProxy(System.Action)">
            <summary>
            Enqueues an action and returns a proxy task that will execute the action.
            Awaiting the returned proxy <see cref="T:System.Threading.Tasks.Task"/> waits for the enqueued action to finish executing.
            </summary>
            <param name="command">The action to execute.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that will execute the enqueued action.</returns>
            <remarks>
            Awaiting this task before <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> is called will cause the calling
            thread of execution to block until <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> is called. Ensure that
            either <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> has already been called, or that your program has
            a mechanism in another thread to call <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/>. You really need to
            call <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> for awaiting the result to work.
            </remarks>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.EnqueueAndGetProxy(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Enqueues an async action and returns a proxy task that will execute the action.
            Awaiting the returned proxy <see cref="T:System.Threading.Tasks.Task"/> waits for the enqueued action to finish executing.
            </summary>
            <param name="command">The async action to enqueue.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> that will execute the enqueued action.</returns>
            <remarks>
            Awaiting this task before <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> is called will cause the calling
            thread of execution to block until <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> is called. Ensure that
            either <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> has already been called, or that your program has
            a mechanism in another thread to call <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/>. You really need to
            call <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> for awaiting the result to work.
            </remarks>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.EnqueueAndGetProxy``1(System.Func{``0})">
            <summary>
            Enqueues a function and returns a proxy task that will execute the function.
            Awaiting the returned <see cref="T:System.Threading.Tasks.Task"/> waits for the enqueued function to finish executing
            and returns the result.
            </summary>
            <param name="command">The command to execute.</param>
            <typeparam name="TResult">The data type returned by the function</typeparam>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> that will execute the enqueued action, once dequeued.</returns>
            <remarks>
            Awaiting this task before <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> is called will cause the calling
            thread of execution to block until <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> is called. Ensure that
            either <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> has already been called, or that your program has
            a mechanism in another thread to call <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/>. You really need to
            call <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> for awaiting the result to work.
            </remarks>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.EnqueueAndGetProxy``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Enqueues an async function and returns a proxy task that will execute the function.
            Awaiting the returned <see cref="T:System.Threading.Tasks.Task"/> waits for the enqueued function to finish executing
            and returns the result.
            </summary>
            <param name="command">The async function to enqueue.</param>
            <typeparam name="TResult">The data type returned by the function.</typeparam>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> that will execute the enqueued action.</returns>
            <remarks>
            Awaiting this task before <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> is called will cause the calling
            thread of execution to block until <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> is called. Ensure that
            either <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> has already been called, or that your program has
            a mechanism in another thread to call <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/>. You really need to
            call <see cref="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing"/> for awaiting the result to work.
            </remarks>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.TryEnqueueTask``1(System.Threading.Tasks.Task{``0},System.Boolean@)">
            <summary>
            Tries to enqueues a task for later execution. If the passed in task is not unstarted,
            it's not enqueued.
            </summary>
            <param name="task">the unstarted task</param>
            <param name="enqueued">a flag indicating if the task was actually enqueued</param>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <returns>The passed in task.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="task"/> is <see langword="null"/> </exception>
            <remarks>
            <para>
            When passing in a previously started task the task is returned so that you can still await
            the result of the associated action. This is to support framework builders who may not control
            if a task is started or not.
            </para>
            <para>
            The reason for not enqueuing is to prevent such tasks, which can't be started, from
            occupying a position in the execution queue. This allows the processor to get to actual
            unstarted tasks sooner.
            </para>
            </remarks>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.TryEnqueueTask(System.Threading.Tasks.Task,System.Boolean@)">
            <summary>
            Tries to enqueues a task for later execution. If the passed in task is already
            started, it's not enqueued.
            </summary>
            <param name="task">the unstarted task</param>
            <param name="enqueued">a flag indicating if the task was actually enqueued.</param>
            <returns>The passed in task.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="task"/> is <see langword="null"/> </exception>
            <remarks>
            <para>
            When passing in a previously started task the task is still returned so that you can still await the result
            of the associated action. This is to support framework builders who may not control
            if a task is unstarted or not.
            </para>
            <para>
            The reason for not enqueuing is to prevent such tasks, which can't be started, from
            occupying a position in the execution queue. This allows the processor to get to actual
            unstarted tasks sooner.
            </para>
            </remarks>
        </member>
        <member name="P:Jcd.Tasks.BlockingTaskProcessor.HasTasks">
            <summary>
            Gets a flag indicating if there are any pending tasks.
            </summary>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.StopProcessingAndClearQueue">
            <summary>
            Signals the task processor to halt all processing immediately. This also cancels all
            tasks created by this task task processor. This is mostly intended to be called
            during application shutdown.
            </summary>
        </member>
        <member name="P:Jcd.Tasks.BlockingTaskProcessor.IsStarted">
            <summary>
            Gets a flag indicating if the task processing has started. (it might be paused though).
            </summary>
        </member>
        <member name="P:Jcd.Tasks.BlockingTaskProcessor.IsPaused">
            <summary>
            Gets a flag indicating if the command processing is currently paused.
            </summary>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.Pause">
            <summary>
            Pauses the retrieval and execution of queued tasks. If a task is in the middle of being started when this is
            called it will still get started.
            </summary>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.Resume">
            <summary>
            Resumes command processing.
            </summary>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.PauseAsync">
            <summary>
            Pauses the retrieval and execution of queued tasks. If a task is in the middle of being started
            when this is called it will still get started.
            </summary>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.ResumeAsync">
            <summary>
            Resumes task processing.
            </summary>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.StartProcessing">
            <summary>
            Starts the processing of queued tasks.
            </summary>
        </member>
        <member name="M:Jcd.Tasks.BlockingTaskProcessor.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Jcd.Tasks.NamespaceDoc">
            <summary>
            Provides types and extension methods to assist with the creation, execution, and
            management of unstarted <see cref="T:System.Threading.Tasks.Task"/> instances.
            </summary>
        </member>
        <member name="T:Jcd.Tasks.SynchronizedValue`1">
            <summary>
            Provides a simple async-safe method of setting, getting, and altering values intended
            to be shared among tasks and threads.
            </summary>
            <typeparam name="T">The data type to synchronize access to.</typeparam>
            <remarks>
            <para>
            While this provides a method of easily ensuring any one shared value is appropriately
            locked during setting or getting, you still need to thoroughly understand your
            use case. For example, having two <see cref="T:Jcd.Tasks.SynchronizedValue`1"/> instances accessed
            by two different threads, in rapid succession, in different orders can cause
            potentially unexpected results.
            </para>
            <para>
            In cases where the pair/tuple must be consistent at all times across all accesses,
            consider creating a struct containing the necessary fields/properties and wrapping
            that in a <see cref="T:Jcd.Tasks.SynchronizedValue`1"/> instead of each individual field/property.
            </para>
            <para>
            As well this implementation uses <see cref="T:System.Threading.SemaphoreSlim"/> and requires Dispose to be
            called. Either implement <see cref="T:System.IDisposable"/> or call it directly at the appropriate
            time. See the documentation for <see cref="M:Jcd.Tasks.SynchronizedValue`1.ChangeValue(System.Func{`0,`0})"/> and <see cref="M:Jcd.Tasks.SynchronizedValue`1.ChangeValueAsync(System.Func{`0,`0})"/>
            for recursive reentrancy considerations. <i>(don't try it)</i>
            </para>
            </remarks>
        </member>
        <member name="M:Jcd.Tasks.SynchronizedValue`1.#ctor(`0)">
            <summary>
            Constructs an <see cref="T:Jcd.Tasks.SynchronizedValue`1"/> instance.
            </summary>
            <param name="initialValue">The starting value.</param>
        </member>
        <member name="P:Jcd.Tasks.SynchronizedValue`1.Value">
            <summary>
            Get the synchronized value.
            </summary>
            <example>
            <code>
            var sv = new SynchronizedValue&lt;int&gt;(15);
            
            // get the value
            setValue = sv.Value;
            
            </code>
            </example>
        </member>
        <member name="M:Jcd.Tasks.SynchronizedValue`1.GetValueAsync">
            <summary>
            Gets the value in an async friendly manner.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> containing the retrieved value.</returns>
            <example>
            <code>
            var sv = new SynchronizedValue&lt;int&gt;(15);
            
            // get the value
            await setValue = sv.GetValueAsync(20);
            
            </code>
            </example>
        </member>
        <member name="M:Jcd.Tasks.SynchronizedValue`1.SetValueAsync(`0)">
            <summary>
            Sets the current value to the provided value.
            </summary>
            <param name="value">The provided value.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> containing the provided value.</returns>
            <example>
            <code>
            var sv = new SynchronizedValue&lt;int&gt;();
            
            // set the value to 10.
            await setValue = sv.SetValueAsync(10);
            
            // set the value to 20.
            await setValue = sv.SetValueAsync(20);
            
            </code>
            </example>
        </member>
        <member name="M:Jcd.Tasks.SynchronizedValue`1.GetValue">
            <summary>
            Retrieves the current value. If another thread edits the value, moment later a subsequent
            call will yield a different result. 
            </summary>
            <returns>The current value as of establishing the lock.</returns>
            <example>
            <code>
            var sv = new SynchronizedValue&lt;int&gt;(15);
            
            // get the value
            setValue = sv.GetValue(20);
            
            </code>
            </example>
        </member>
        <member name="M:Jcd.Tasks.SynchronizedValue`1.SetValue(`0)">
            <summary>
            Sets the current value to the provided value.
            </summary>
            <param name="value">The provided value.</param>
            <returns>The provided value.</returns>
            <example>
            <code>
            var sv = new SynchronizedValue&lt;int&gt;();
            
            // set the value to 10.
            setValue = sv.SetValue(10);
            
            // set the value to 20.
            setValue = sv.SetValue(20);
            
            </code>
            </example>
        </member>
        <member name="M:Jcd.Tasks.SynchronizedValue`1.ChangeValue(System.Func{`0,`0})">
             <summary>
             Calls the provided function, passing in the current value, and assigns the result
             of the function call, to the current value. <b>This is not recursively reentrant.
             see remarks for details.</b>
             </summary>
             <param name="func">
             A function to call which receives the current value, modifies it, and returns the
             modified result.
             </param>
             <returns>The modified value.</returns>
             <example>
             Standard usage: pass in a function to manipulate the current value.
             <code>
             var sv = new SynchronizedValue&lt;int&gt;();
             
             // increment the value by one.
             var changedValue = sv.ChangeValue(x => x + 1);
             
             // increment the value by two.
             changedValue = sv.ChangeValue(x => x + 2);
             
             </code>
             </example>
             <remarks>
             <para>
             <b>WARNING:</b>This is <b>not</b> a recursively reentrant method. Never write code like
             the following.
             </para>
             <code>
             var sv=new SynchronizedValue&lt;int&gt;(10);
            
             // deadlock yourself in a single line of code!
             var changedValue = sv.ChangeValue(x=>sv.Value+10);
             </code>
             </remarks>
        </member>
        <member name="M:Jcd.Tasks.SynchronizedValue`1.ChangeValueAsync(System.Func{`0,`0})">
             <summary>
             Calls the provided function, passing in the current value, and assigns the result
             of the function call, to the current value. <b>This is not recursively reentrant.
             see remarks for details.</b>
             </summary>
             <param name="func">The function to call.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> containing the modified value.</returns>
             <example>
             Standard usage: pass in a function to manipulate the current value.
             <code>
             var sv = new SynchronizedValue&lt;int&gt;();
             
             // increment the value by one.
             var changedValue = await sv.ChangeValueAsync(x => x + 1);
             
             // increment the value by two.
             changedValue = await sv.ChangeValueAsync(x => x + 2);
             
             </code>
             </example>
             <remarks>
             <para>
             <b>WARNING:</b>This is <b>not</b> a recursively reentrant method. Never write code like
             the following.
             </para>
             <code>
             var sv=new SynchronizedValue&lt;int&gt;(10);
            
             // deadlock yourself in a single line of code!
             var changedValue = await sv.ChangeValueAsync(x=>sv.Value+10);
             </code>
             </remarks>
        </member>
        <member name="M:Jcd.Tasks.SynchronizedValue`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Jcd.Tasks.TaskExtensions">
            <summary>
            A set of helpers for <see cref="T:System.Threading.Tasks.Task"/> objects.
            </summary>
        </member>
        <member name="M:Jcd.Tasks.TaskExtensions.IsUnstarted(System.Threading.Tasks.Task)">
            <summary>
            Checks if a task is unstarted and startable. (Status==Created)
            </summary>
            <param name="task">the task to inspect</param>
            <returns>True if unstarted. False otherwise.</returns>
        </member>
        <member name="M:Jcd.Tasks.TaskExtensions.Run(System.Threading.Tasks.Task)">
            <summary>
            Calls <see cref="M:Jcd.Tasks.TaskExtensions.TryStart(System.Threading.Tasks.Task,System.Exception@,System.Threading.Tasks.TaskScheduler)"/> on a task then returns the task, discarding exceptions.
            </summary>
            <param name="task">the task to start</param>
            <returns>the original task</returns>
            <remarks>
            While this returns the original task, it doesn't guarantee it's awaitable. Only call
            this method if you've got 100% control over the lifecycle of the task. Otherwise call
            <see cref="M:Jcd.Tasks.TaskExtensions.TryStart(System.Threading.Tasks.Task,System.Exception@,System.Threading.Tasks.TaskScheduler)"/> instead and inspect the results before calling await.
            </remarks>
        </member>
        <member name="M:Jcd.Tasks.TaskExtensions.Run``1(System.Threading.Tasks.Task{``0},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Calls <see cref="M:Jcd.Tasks.TaskExtensions.TryStart(System.Threading.Tasks.Task,System.Exception@,System.Threading.Tasks.TaskScheduler)"/> on a task then returns the task, discarding exceptions.
            </summary>
            <param name="task">the task to start</param>
            <param name="taskScheduler">
            The <see cref="T:System.Threading.Tasks.TaskScheduler"/> to use for executing the task. If not provided the
            current <see cref="T:System.Threading.Tasks.TaskScheduler"/> is used.
            </param>
            <typeparam name="TResult">The type of data returned from the task.</typeparam>
            <returns>the original task</returns>
            <remarks>
            While this returns the original task, it doesn't guarantee it's awaitable. Only call
            this method if you've got 100% control over the lifecycle of the task. Otherwise call
            <see cref="M:Jcd.Tasks.TaskExtensions.TryStart(System.Threading.Tasks.Task,System.Exception@,System.Threading.Tasks.TaskScheduler)"/> instead and inspect the results before calling await.
            </remarks>
        </member>
        <member name="M:Jcd.Tasks.TaskExtensions.TryStart(System.Threading.Tasks.Task,System.Exception@,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Tries to successfully call start. 
            </summary>
            <param name="task">The task to call Start on.</param>
            <param name="taskScheduler">
            The <see cref="T:System.Threading.Tasks.TaskScheduler"/> to use for executing the task. If not provided the
            current <see cref="T:System.Threading.Tasks.TaskScheduler"/> is used.
            </param>
            <param name="exception">The exception resulting from calling Start.</param>
            <returns>
            <see cref="F:Jcd.Tasks.TryStartResult.SuccessfullyStarted"/> when the Start was called and no exception occurred.
            <see cref="F:Jcd.Tasks.TryStartResult.AlreadyStarted"/> When the task was already in a started state. Start was not called.
            <see cref="F:Jcd.Tasks.TryStartResult.ErrorDuringStart"/> When start was called and an exception occurred during the call to start. Check the exception parameter for details.
            </returns>
        </member>
        <member name="M:Jcd.Tasks.TaskExtensions.TryWait(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Waits on a running task until it completes, is cancelled, faults or times out.
            </summary>
            <param name="task">the task to wait on.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns><see langword="true"/> if it ran to completion. <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the task is unstarted.</exception>
        </member>
        <member name="M:Jcd.Tasks.TaskExtensions.TryWait(System.Threading.Tasks.Task,System.TimeSpan,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Waits on a running task until it completes, is cancelled, faults or times out.
            </summary>
            <param name="task">the task to wait on.</param>
            <param name="timeout">the amount of time to wait. Must be a value between -1 (infinite) and  <see cref="F:System.Int32.MaxValue"/></param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns><see langword="true"/> if ran to completion. <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the task is unstarted.</exception>
        </member>
        <member name="M:Jcd.Tasks.TaskExtensions.TryWait(System.Threading.Tasks.Task,System.Nullable{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Waits on a running task until it completes, is cancelled, faults or times out.
            This extension method swallows exceptions. The exception should be available on
            the Task.Exception property
            </summary>
            <param name="task">the task to wait on.</param>
            <param name="millisecondsTimeout">the amount of time to wait. Must be a value between -1 (infinite) and  <see cref="F:System.Int32.MaxValue"/></param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns><see langword="true"/> if ran to completion. <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Jcd.Tasks.TryStartResult">
            <summary>
            The possible results of calling <see cref="M:Jcd.Tasks.TaskExtensions.TryStart(System.Threading.Tasks.Task,System.Exception@,System.Threading.Tasks.TaskScheduler)"/>
            </summary>
        </member>
        <member name="F:Jcd.Tasks.TryStartResult.SuccessfullyStarted">
            <summary>
            Start was called and no exception resulted.
            </summary>
        </member>
        <member name="F:Jcd.Tasks.TryStartResult.AlreadyStarted">
            <summary>
            The task was already in a started state. Start was not called.
            </summary>
        </member>
        <member name="F:Jcd.Tasks.TryStartResult.ErrorDuringStart">
            <summary>
            An exception occurred during the call to start. 
            </summary>
        </member>
        <member name="T:Jcd.Tasks.UnstartedTask">
            <summary>
            A Task factory that wraps the constructor with a tiny bit of logic, simplifying the process
            of directly creating unstarted <see cref="T:System.Threading.Tasks.Task"/>s.
            </summary>
        </member>
        <member name="M:Jcd.Tasks.UnstartedTask.Create(System.Action,System.Nullable{System.Threading.CancellationToken},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates an unstarted <see cref="T:System.Threading.Tasks.Task"/> as a proxy for an action. Once started the task will execute the action.
            </summary>
            <param name="action">The work to execute.</param>
            <param name="cancellationToken">The optional cancellation token for the task. The default is <see langword="null"/>.</param>
            <param name="options">Task <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> for the task. The default is <see cref="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously"/></param>
            <returns>An unstarted <see cref="T:System.Threading.Tasks.Task"/> proxy for the action.</returns>
        </member>
        <member name="M:Jcd.Tasks.UnstartedTask.Create(System.Func{System.Threading.Tasks.Task},System.Nullable{System.Threading.CancellationToken},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates an unstarted <see cref="T:System.Threading.Tasks.Task"/> as a proxy for an asynchronous action. Once started the task will execute the action. 
            </summary>
            <param name="action"></param>
            <param name="cancellationToken">The optional cancellation token for the task. The default is <see langword="null"/>.</param>
            <param name="options">Task <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> for the task. The default is <see cref="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously"/></param>
            <returns>An unstarted <see cref="T:System.Threading.Tasks.Task"/> proxy for the asynchronous action.</returns>
        </member>
        <member name="M:Jcd.Tasks.UnstartedTask.Create``1(System.Func{``0},System.Nullable{System.Threading.CancellationToken},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates an unstarted <see cref="T:System.Threading.Tasks.Task`1"/> as a proxy for a function. Once started the task will execute the function.
            </summary>
            <param name="function">The function to execute.</param>
            <param name="cancellationToken">The optional cancellation token for the task. The default is <see langword="null"/>.</param>
            <param name="options">Task <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> for the task. The default is <see cref="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously"/></param>
            <returns>An unstarted <see cref="T:System.Threading.Tasks.Task`1"/> proxy for the function.</returns>
            <typeparam name="TResult">The type of the data returned.</typeparam>
        </member>
        <member name="M:Jcd.Tasks.UnstartedTask.Create``1(System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.Threading.CancellationToken},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates an unstarted <see cref="T:System.Threading.Tasks.Task`1"/> as a proxy for an asynchronous function. Once started the task will execute the function.
            </summary>
            <param name="function"></param>
            <param name="cancellationToken">The optional cancellation token for the task. The default is <see langword="null"/>.</param>
            <param name="options">Task <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> for the task. The default is <see cref="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously"/></param>
            <returns>An unstarted <see cref="T:System.Threading.Tasks.Task`1"/> proxy for the asynchronous function.</returns>
            <typeparam name="TResult">The type of the data returned.</typeparam>
        </member>
    </members>
</doc>
